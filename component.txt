import { Book } from "@shared/schema";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { BookOpen, Edit, Trash2, Calendar } from "lucide-react";

interface BookCardProps {
  book: Book;
  onEdit: (book: Book) => void;
  onDelete: (id: string) => void;
}

export default function BookCard({ book, onEdit, onDelete }: BookCardProps) {
  const handleEdit = () => {
    console.log('Edit book triggered:', book.title);
    onEdit(book);
  };

  const handleDelete = () => {
    console.log('Delete book triggered:', book.title);
    onDelete(book.id);
  };

  return (
    <Card className="hover-elevate group" data-testid={`card-book-${book.id}`}>
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between gap-2">
          <div className="flex-1 min-w-0">
            <CardTitle className="text-lg leading-tight" data-testid={`text-title-${book.id}`}>
              {book.title}
            </CardTitle>
            <CardDescription className="text-sm mt-1" data-testid={`text-author-${book.id}`}>
              by {book.author}
            </CardDescription>
          </div>
          <BookOpen className="h-5 w-5 text-muted-foreground shrink-0" />
        </div>
      </CardHeader>
      
      <CardContent className="pb-3 space-y-3">
        <div className="flex flex-wrap gap-2">
          {book.genre && (
            <Badge variant="secondary" data-testid={`badge-genre-${book.id}`}>
              {book.genre}
            </Badge>
          )}
          {book.publicationYear && (
            <Badge variant="outline" className="text-xs" data-testid={`badge-year-${book.id}`}>
              <Calendar className="h-3 w-3 mr-1" />
              {book.publicationYear}
            </Badge>
          )}
        </div>
        
        {book.description && (
          <p className="text-sm text-muted-foreground line-clamp-2" data-testid={`text-description-${book.id}`}>
            {book.description}
          </p>
        )}
        
        {book.isbn && (
          <p className="text-xs text-muted-foreground" data-testid={`text-isbn-${book.id}`}>
            ISBN: {book.isbn}
          </p>
        )}
      </CardContent>
      
      <CardFooter className="pt-0 flex justify-end gap-2">
        <Button 
          size="sm" 
          variant="outline" 
          onClick={handleEdit}
          data-testid={`button-edit-${book.id}`}
        >
          <Edit className="h-4 w-4 mr-1" />
          Edit
        </Button>
        <Button 
          size="sm" 
          variant="destructive" 
          onClick={handleDelete}
          data-testid={`button-delete-${book.id}`}
        >
          <Trash2 className="h-4 w-4 mr-1" />
          Delete
        </Button>
      </CardFooter>
    </Card>
  );
}